
Main Concepts of Object-Oriented Programming (OOPs) 

Class   
	A class is a collection of objects. A class contains the blueprints or the prototype from 
	which the objects are being created. It is a logical entity that contains some attributes 
	and methods. 
	example
		class ClassName:
		   # Statement-1
		   .
		   .
		   .
		   # Statement-N
Objects
	The object is an entity that has a state and behavior associated with it. It may be any 
	real-world object like a mouse, keyboard, chair, table, pen, etc. Integers, strings, 
	floating-point numbers, even arrays, and dictionaries, are all objects. 
	example
	obj = Dog()

Methods
	Methods represent behaviors. Methods perform actions; methods might return information about 	
	an object, or update an object’s data. The method’s code is defined in the class definition.	
	
The __init__ method 	constructors
	The method is useful to do any initialization you want to do with your object. 
	example
	def __init__(self, name):
		self.name = name
		
Destructor
	def __del__(self):	
		
Polymorphism
	Polymorphism simply means having many forms
	1. Method Overriding
		Runtime polymorphism uses method overriding. In method overriding, a child class can 
		provide a different implementation than its parent class.
	2. Method Overloading
		Methods or functions may have the same name, but a different number of parameters 
		passed into the method call. Different results may occur depending on the number of 
		parameters passed in.
		
Encapsulation
	we have created the variable as the private attribute. We cannot even access this attribute
	directly and can’t even change its value.
	 
Abstraction
	Abstraction means that the user interacts with only selected attributes and methods of an 		
	object. Abstraction uses simplified, high level tools, to access a complex object.
	
Inheritance
	Inheritance is the capability of one class to derive or inherit the properties from another 
	class. The class that derives properties is called the derived class or base class and the 		
	class from which the properties are being derived is called the base class or parent class. 
		Hierarchical Inheritance:
		Multilevel Inheritance 
		Multiple Inheritance:
		Single Inheritance:

Concepts of Functional Programming

Pure Functions: 
	These functions have two main properties. First, they always produce the same output for 
	the same arguments irrespective of anything else. Secondly, they have no side-effects i.e. 
	they do modify any argument or global variables or output something.

Recursion: 
	There are no “for” or “while” loop in functional languages. Iteration in functional 
	languages is implemented through recursion.

Functions are First-Class and can be Higher-Order: 
	First-class functions are treated as first-class variable. The first-class variables can be 
	passed to functions as a parameter, can be returned from functions or stored in data 
	structures.

Variables are Immutable: 
	In functional programming, we can’t modify a variable after it’s been initialized. We can 
	create new variables – but we can’t modify existing variables.

Python Function

*args (Non-Keyword Arguments)
	The special syntax *args in function definitions in python is used to pass a variable number 
	of arguments to a function. It is used to pass a non-key worded, variable-length argument
	list.

**kwargs (Keyword Arguments)
	The special syntax **kwargs in function definitions in python is used to pass a keyworded, 
	variable-length argument list. We use the name kwargs with the double star. The reason is 
	because the double star allows us to pass through keyword arguments (and any number of them).
	
yield
	The yield statement suspends function’s execution and sends a value back to the caller, but 
	retains enough state to enable function to resume where it is left off. When resumed, the 
	function continues execution immediately after the last yield run. 

lambda
	lambda arguments : expression 
	g = lambda x: x*x*x
	print(g(7)) output is 7 cube
	
Immutability
	Immutability is a functional programming paradigm can be used for debugging as it will throw 
	an error where the variable is being changed not where the value is changed. Python too 
	supports some immutable data types like string, tuple, numeric, etc.

Map(): 
	map() function returns a list of the results after applying the given function to each item 
	of a given iterable (list, tuple etc.)

Basic Programming 

Indentation:
	Indentation in Python refers to the (spaces and tabs) that are used at the beginning of a 
	statement. The statements with the same indentation belong to the same group called a suite.

Data types:
	str 	:x = str("Hello World")
	int	:x = int(20)
	float	:x = float(20.5)
	boolean :bool([x])	True or False
	list	:x = list(("apple", "banana", "cherry"))
	dict	:x = dict(name="John", age=36)
	tuple	:x = tuple(("apple", "banana", "cherry"))
	set	:x = set(("apple", "banana", "cherry"))	
	none	:x= None
	
Python Arithmetic Operators

+ Addition		Adds values on either side of the operator.	a + b = 30
- Subtraction		Subtracts right hand operand from left hand operand.	a – b = -10
* Multiplication	Multiplies values on either side of the operator	a * b = 200
/ Division		Divides left hand operand by right hand operand	b / a = 2
% Modulus		Divides left hand operand by right hand operand and returns remainder
			b % a = 0
** Exponent		Performs exponential (power) calculation on operators
			a**b =10 to the power 20
// Floor Division	The division of operands where the result is the quotient in which the digits
			after the decimal point are removed. But if one of the operands is negative,
			the result is floored, i.e., rounded away from zero (towards negative
			infinity) −	9//2 = 4 and 9.0//2.0 = 4.0, -11//3 = -4, -11.0//3 = -4.0	
 
Python Comparison Operators

==			If the values of two operands are equal, then the condition becomes true.
			(a == b) is not true.
!=			If values of two operands are not equal, then condition becomes true.
			(a != b) is true.
<>			If values of two operands are not equal, then condition becomes true.
			(a <> b) is true. This is similar to != operator.
>			If the value of left operand is greater than the value of right operand, then condition
			becomes true.	(a > b) is not true.
<			If the value of left operand is less than the value of right operand, then condition
			becomes true.	(a < b) is true.
>=			If the value of left operand is greater than or equal to the value of right operand, then
			condition becomes true.(a >= b) is not true.
<=			If the value of left operand is less than or equal to the value of right operand, then
			condition becomes true. (a <= b) is true.
	
Python Bitwise Operators
	
& Binary AND		Operator copies a bit to the result if it exists in both operands
			(a & b) (means 00001100)
| Binary OR		It copies a bit if it exists in either operand.	(a | b) = 61 (means 0011 1101)
^ Binary XOR		It copies the bit if it is set in one operand but not both.
			(a ^ b) = 49 (means 00110001)
~ Binary Ones Complement	It is unary and has the effect of 'flipping' bits.
				(~a ) = -61 (means 1100 0011 in 2's complement form due to a signed binary number.
<< Binary Left Shift	The left operands value is moved left by the number of bits specified by the right 
			operand.	a << 2 = 240 (means 1111 0000)
>> Binary Right Shift	The left operands value is moved right by the number of bits specified by the right 
			operand.	a >> 2 = 15 (means 0000 1111)

if else elif	

loop 
	for 
	while 
	do while

File Operations

Opening a File		:Opening a file is the fundamental step in every file handling task. 			open("myfile.txt") or open("myfile.txt", "r"),open("myfile.txt", "w")
			open("myfile.txt", "a"), open("myfile.txt", "r+")
	
Reading a File		: read the contents of the file
			file = open("myfile.txt", "r")
			print(file.read())
	
Writing/Creating a File: After opening a file, is writing into a file
			file = open("myfile.txt", "w")	  
			file.write("Hello Alln")

Closing a File		: opening and performing the reading, writing operations,
			  it is important to close the file. 
			file = open("myfile.txt", 'r')
			print(file.read())
			file.close()

Cursor Positioning Methods
 The .seek() method	: change the cursor to a specific position
 			 file = open("myfile.txt", 'r')
			 file.seek(0)
			 file.close()

 The .tell() method	: prints the current position of our cursor
			file = open("myfile.txt", 'r')
			file.tell()
			
Truncating a File	: truncate the file up to the desired length.
			file = open('myfile.txt', 'w')
			file.truncate(20)
			file.close()		

